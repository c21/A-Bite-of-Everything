Chapter 1: Beyond Relational Databases
1.traditional relational database on multiple machines
  use two phase commit (why not scale? )

Chapter 3: Installing Cassandra
1.concept
  keyspace: list a relational database, define one or more tables.
  replication factor: how many nodes (machines) data will be written to.
  CQL: cassandra query language, to interact with cassandra for client.
       (commands: create keyspace, create table, insert, drop table ...)

Chapter 4: The Cassandra Query Language
1.cassandra data model
  cluster -> keyspace -> table -> row -> column
  a column is a pair of (name, value).
  a row is a collection of columns (can be implemented as map[name] = value).
  (new columns can be added to a table dynamically)

2.column
  it has a pair of (name, value), also has attributes such as:
  (1).the last timestamp the column was updated
  * cassandra resolves the writes conflict by keeping the write with biggest timestamp.
    everytime client issues a write (UPDATE, INSERT etc) to column, a timestamp is automatically
    generated by cassandra for the column write.
  (2).time to live (TTL) for the column value
  * when client issues a write to column, client can also set the time to live (TTL) for a single
    column. The TTL will be counted down automatically by cassandra, and when the TTL is 0, the value of
    that column will be set to null automatically by cassandra.

  (why client cannot get/set timestamp and TTL for primary key column? )
  
  column type: the type of value 
  int, float, text, timestamp, uuid, timeuuid, boolean, blob, counter, ...
  collections: set, list, map
  user defined type: CREATE TYPE type-name (...);

 
